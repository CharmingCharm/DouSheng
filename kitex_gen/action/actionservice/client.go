// Code generated by Kitex v0.3.1. DO NOT EDIT.

package actionservice

import (
	"context"
	"github.com/CharmingCharm/DouSheng/idl/kitex_gen/action"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	UpdateFavorite(ctx context.Context, req *action.UpdateFavoriteRequest, callOptions ...callopt.Option) (r *action.UpdateFavoriteResponse, err error)
	GetFavoriteVideos(ctx context.Context, req *action.GetFavoriteVideosRequest, callOptions ...callopt.Option) (r *action.GetFavoriteVideosResponse, err error)
	UpdateComment(ctx context.Context, req *action.UpdateCommentRequest, callOptions ...callopt.Option) (r *action.UpdateCommentResponse, err error)
	GetCommentLists(ctx context.Context, req *action.GetCommentListsRequest, callOptions ...callopt.Option) (r *action.GetCommentListsResponse, err error)
	UpdateRelationship(ctx context.Context, req *action.UpdateRelationshipRequest, callOptions ...callopt.Option) (r *action.UpdateRelationshipResponse, err error)
	GetUserFollowList(ctx context.Context, req *action.GetUserFollowListRequest, callOptions ...callopt.Option) (r *action.GetUserFollowListResponse, err error)
	GetUserFollowerList(ctx context.Context, req *action.GetUserFollowerListRequest, callOptions ...callopt.Option) (r *action.GetUserFollowerListResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kActionServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kActionServiceClient struct {
	*kClient
}

func (p *kActionServiceClient) UpdateFavorite(ctx context.Context, req *action.UpdateFavoriteRequest, callOptions ...callopt.Option) (r *action.UpdateFavoriteResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateFavorite(ctx, req)
}

func (p *kActionServiceClient) GetFavoriteVideos(ctx context.Context, req *action.GetFavoriteVideosRequest, callOptions ...callopt.Option) (r *action.GetFavoriteVideosResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFavoriteVideos(ctx, req)
}

func (p *kActionServiceClient) UpdateComment(ctx context.Context, req *action.UpdateCommentRequest, callOptions ...callopt.Option) (r *action.UpdateCommentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateComment(ctx, req)
}

func (p *kActionServiceClient) GetCommentLists(ctx context.Context, req *action.GetCommentListsRequest, callOptions ...callopt.Option) (r *action.GetCommentListsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetCommentLists(ctx, req)
}

func (p *kActionServiceClient) UpdateRelationship(ctx context.Context, req *action.UpdateRelationshipRequest, callOptions ...callopt.Option) (r *action.UpdateRelationshipResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateRelationship(ctx, req)
}

func (p *kActionServiceClient) GetUserFollowList(ctx context.Context, req *action.GetUserFollowListRequest, callOptions ...callopt.Option) (r *action.GetUserFollowListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserFollowList(ctx, req)
}

func (p *kActionServiceClient) GetUserFollowerList(ctx context.Context, req *action.GetUserFollowerListRequest, callOptions ...callopt.Option) (r *action.GetUserFollowerListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserFollowerList(ctx, req)
}
