// Code generated by Kitex v0.3.1. DO NOT EDIT.

package videoservice

import (
	"context"
	"github.com/CharmingCharm/DouSheng/kitex_gen/video"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	GetVideoList(ctx context.Context, req *video.GetVideoListRequest, callOptions ...callopt.Option) (r *video.GetVideoListResponse, err error)
	LoadVideos(ctx context.Context, req *video.LoadVideosRequest, callOptions ...callopt.Option) (r *video.LoadVideosResponse, err error)
	PublishVideo(ctx context.Context, req *video.PublishVideoRequest, callOptions ...callopt.Option) (r *video.PublishVideoResponse, err error)
	GetPublishedVideos(ctx context.Context, req *video.GetPublishedVideosRequest, callOptions ...callopt.Option) (r *video.GetPublishedVideosResponse, err error)
	UpdateFavoriteCount(ctx context.Context, req *video.UpdateFavoriteCountRequest, callOptions ...callopt.Option) (r *video.UpdateFavoriteCountResponse, err error)
	UpdateCommentCount(ctx context.Context, req *video.UpdateCommentCountRequest, callOptions ...callopt.Option) (r *video.UpdateCommentCountResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kVideoServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kVideoServiceClient struct {
	*kClient
}

func (p *kVideoServiceClient) GetVideoList(ctx context.Context, req *video.GetVideoListRequest, callOptions ...callopt.Option) (r *video.GetVideoListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetVideoList(ctx, req)
}

func (p *kVideoServiceClient) LoadVideos(ctx context.Context, req *video.LoadVideosRequest, callOptions ...callopt.Option) (r *video.LoadVideosResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.LoadVideos(ctx, req)
}

func (p *kVideoServiceClient) PublishVideo(ctx context.Context, req *video.PublishVideoRequest, callOptions ...callopt.Option) (r *video.PublishVideoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PublishVideo(ctx, req)
}

func (p *kVideoServiceClient) GetPublishedVideos(ctx context.Context, req *video.GetPublishedVideosRequest, callOptions ...callopt.Option) (r *video.GetPublishedVideosResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetPublishedVideos(ctx, req)
}

func (p *kVideoServiceClient) UpdateFavoriteCount(ctx context.Context, req *video.UpdateFavoriteCountRequest, callOptions ...callopt.Option) (r *video.UpdateFavoriteCountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateFavoriteCount(ctx, req)
}

func (p *kVideoServiceClient) UpdateCommentCount(ctx context.Context, req *video.UpdateCommentCountRequest, callOptions ...callopt.Option) (r *video.UpdateCommentCountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateCommentCount(ctx, req)
}
