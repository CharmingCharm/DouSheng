// Code generated by Kitex v0.3.1. DO NOT EDIT.

package videoservice

import (
	"context"
	"github.com/CharmingCharm/DouSheng/kitex_gen/video"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*video.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetVideoList":        kitex.NewMethodInfo(getVideoListHandler, newVideoServiceGetVideoListArgs, newVideoServiceGetVideoListResult, false),
		"LoadVideos":          kitex.NewMethodInfo(loadVideosHandler, newVideoServiceLoadVideosArgs, newVideoServiceLoadVideosResult, false),
		"PublishVideo":        kitex.NewMethodInfo(publishVideoHandler, newVideoServicePublishVideoArgs, newVideoServicePublishVideoResult, false),
		"GetPublishedVideos":  kitex.NewMethodInfo(getPublishedVideosHandler, newVideoServiceGetPublishedVideosArgs, newVideoServiceGetPublishedVideosResult, false),
		"UpdateFavoriteCount": kitex.NewMethodInfo(updateFavoriteCountHandler, newVideoServiceUpdateFavoriteCountArgs, newVideoServiceUpdateFavoriteCountResult, false),
		"UpdateCommentCount":  kitex.NewMethodInfo(updateCommentCountHandler, newVideoServiceUpdateCommentCountArgs, newVideoServiceUpdateCommentCountResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "video",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.1",
		Extra:           extra,
	}
	return svcInfo
}

func getVideoListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceGetVideoListArgs)
	realResult := result.(*video.VideoServiceGetVideoListResult)
	success, err := handler.(video.VideoService).GetVideoList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetVideoListArgs() interface{} {
	return video.NewVideoServiceGetVideoListArgs()
}

func newVideoServiceGetVideoListResult() interface{} {
	return video.NewVideoServiceGetVideoListResult()
}

func loadVideosHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceLoadVideosArgs)
	realResult := result.(*video.VideoServiceLoadVideosResult)
	success, err := handler.(video.VideoService).LoadVideos(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceLoadVideosArgs() interface{} {
	return video.NewVideoServiceLoadVideosArgs()
}

func newVideoServiceLoadVideosResult() interface{} {
	return video.NewVideoServiceLoadVideosResult()
}

func publishVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServicePublishVideoArgs)
	realResult := result.(*video.VideoServicePublishVideoResult)
	success, err := handler.(video.VideoService).PublishVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServicePublishVideoArgs() interface{} {
	return video.NewVideoServicePublishVideoArgs()
}

func newVideoServicePublishVideoResult() interface{} {
	return video.NewVideoServicePublishVideoResult()
}

func getPublishedVideosHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceGetPublishedVideosArgs)
	realResult := result.(*video.VideoServiceGetPublishedVideosResult)
	success, err := handler.(video.VideoService).GetPublishedVideos(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetPublishedVideosArgs() interface{} {
	return video.NewVideoServiceGetPublishedVideosArgs()
}

func newVideoServiceGetPublishedVideosResult() interface{} {
	return video.NewVideoServiceGetPublishedVideosResult()
}

func updateFavoriteCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceUpdateFavoriteCountArgs)
	realResult := result.(*video.VideoServiceUpdateFavoriteCountResult)
	success, err := handler.(video.VideoService).UpdateFavoriteCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceUpdateFavoriteCountArgs() interface{} {
	return video.NewVideoServiceUpdateFavoriteCountArgs()
}

func newVideoServiceUpdateFavoriteCountResult() interface{} {
	return video.NewVideoServiceUpdateFavoriteCountResult()
}

func updateCommentCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceUpdateCommentCountArgs)
	realResult := result.(*video.VideoServiceUpdateCommentCountResult)
	success, err := handler.(video.VideoService).UpdateCommentCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceUpdateCommentCountArgs() interface{} {
	return video.NewVideoServiceUpdateCommentCountArgs()
}

func newVideoServiceUpdateCommentCountResult() interface{} {
	return video.NewVideoServiceUpdateCommentCountResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetVideoList(ctx context.Context, req *video.GetVideoListRequest) (r *video.GetVideoListResponse, err error) {
	var _args video.VideoServiceGetVideoListArgs
	_args.Req = req
	var _result video.VideoServiceGetVideoListResult
	if err = p.c.Call(ctx, "GetVideoList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LoadVideos(ctx context.Context, req *video.LoadVideosRequest) (r *video.LoadVideosResponse, err error) {
	var _args video.VideoServiceLoadVideosArgs
	_args.Req = req
	var _result video.VideoServiceLoadVideosResult
	if err = p.c.Call(ctx, "LoadVideos", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishVideo(ctx context.Context, req *video.PublishVideoRequest) (r *video.PublishVideoResponse, err error) {
	var _args video.VideoServicePublishVideoArgs
	_args.Req = req
	var _result video.VideoServicePublishVideoResult
	if err = p.c.Call(ctx, "PublishVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPublishedVideos(ctx context.Context, req *video.GetPublishedVideosRequest) (r *video.GetPublishedVideosResponse, err error) {
	var _args video.VideoServiceGetPublishedVideosArgs
	_args.Req = req
	var _result video.VideoServiceGetPublishedVideosResult
	if err = p.c.Call(ctx, "GetPublishedVideos", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateFavoriteCount(ctx context.Context, req *video.UpdateFavoriteCountRequest) (r *video.UpdateFavoriteCountResponse, err error) {
	var _args video.VideoServiceUpdateFavoriteCountArgs
	_args.Req = req
	var _result video.VideoServiceUpdateFavoriteCountResult
	if err = p.c.Call(ctx, "UpdateFavoriteCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateCommentCount(ctx context.Context, req *video.UpdateCommentCountRequest) (r *video.UpdateCommentCountResponse, err error) {
	var _args video.VideoServiceUpdateCommentCountArgs
	_args.Req = req
	var _result video.VideoServiceUpdateCommentCountResult
	if err = p.c.Call(ctx, "UpdateCommentCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
